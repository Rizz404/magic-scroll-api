generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"] // ! experimental
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(cuid())
  username   String    @unique
  email      String    @unique
  password   String?
  role       Roles     @default(USER)
  isOauth    Boolean
  lastLogin  DateTime?
  isVerified Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  profile         Profile?
  notes           Note[]
  notePermission  NotePermission[]
  noteInteraction NoteInteraction[]

  @@unique([username, email])
  @@index([username])
}

model Profile {
  id           String   @id @default(cuid())
  userId       String
  firstName    String   @default("")
  lastName     String   @default("")
  profileImage String   @default("")
  age          Int?
  phone        String   @default("")
  socialMedias String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user       User     @relation(fields: [userId], references: [id])
  followers  Follow[] @relation("FollowerRelation")
  followings Follow[] @relation("FollowingRelation")

  @@unique([userId])
  @@index([userId])
}

model Follow {
  followerId  String
  followingId String

  follower  Profile @relation("FollowerRelation", fields: [followerId], references: [id])
  following Profile @relation("FollowingRelation", fields: [followingId], references: [id])

  @@id([followerId, followingId])
  @@unique([followerId, followingId])
  @@index([followerId, followingId])
}

model Note {
  id             String   @id @default(cuid())
  userId         String
  studyId        String
  title          String
  content        String
  thumbnailImage String
  attachments    String[]
  isPrivate      Boolean  @default(false)
  upvotedCount   Int      @default(0)
  downvotedCount Int      @default(0)
  favoritedCount Int      @default(0)
  savedCount     Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user            User              @relation(fields: [userId], references: [id])
  study           Study             @relation(fields: [studyId], references: [id])
  tags            Tag[]
  notePermission  NotePermission[]
  noteInteraction NoteInteraction[]

  @@index([userId, studyId, title])
}

model NoteInteraction {
  userId      String
  noteId      String
  isUpvoted   Boolean @default(false)
  isDownvoted Boolean @default(false)
  isFavorited Boolean @default(false)
  isSaved     Boolean @default(false)

  user User @relation(fields: [userId], references: [id])
  note Note @relation(fields: [noteId], references: [id])

  @@id([userId, noteId])
  @@unique([userId, noteId])
  @@index([userId, noteId])
}

model NotePermission {
  id         String     @id @default(cuid())
  noteId     String
  userId     String
  permission Permission @default(READ)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  note Note @relation(fields: [noteId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@unique([noteId])
  @@index([noteId])
}

model Tag {
  id          String   @id @default(cuid())
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  notes Note[]

  @@unique([name])
  @@index([name])
}

model Study {
  id          String   @id @default(cuid())
  name        String
  description String
  image       String   @default("https://i.pinimg.com/236x/a2/6a/27/a26a27a5ff6a2cb80d5b872a73d1413b.jpg")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  notes Note[]

  @@unique([name])
  @@index([name])
}

enum Roles {
  USER
  ADMIN
}

enum Permission {
  READ
  READ_WRITE
}
